import "../../schema"

// -----------------------------------------------------------------------------
// DreamBooth Prediction
// -----------------------------------------------------------------------------

model Prediction {
  id           String    @id @default(cuid())
  uuid         String    @unique
  input        Json?
  output       Json?
  status       String?
  created_at   DateTime?
  started_at   DateTime?
  completed_at DateTime?
  version      String?
  metrics      Json?
  error        String?
  logs         String?   @db.Text

  @@map(name: "predictions")
}

// -----------------------------------------------------------------------------
// DreamBooth Training
// -----------------------------------------------------------------------------

enum LRScheduler {
  linear
  cosine
  cosine_with_restarts
  polynomial
  constant
  constant_with_warmup
}

/// There are a few inputs you should know about when training with this model:
///
/// - `instance_data`   (required) - A ZIP file containing your training images (JPG, PNG, etc. size not restricted). These images contain your "subject" that you want the trained model to embed in the output domain for later generating customized scenes beyond the training images. For best results, use images without noise or unrelated object in the background.
/// - `instance_prompt` (required) - This is the prompt you use to describe your training images, in the format: `a [identifier] [class noun]`, where the `[identifier]` should be a rare-token - it is found that relatively short sequences with 1-3 letters work the best (e.g. `sks`, `xjy`). `[class noun]` is a coarse class descriptor of the subject (e.g. cat, dog, watch, etc.). For example, your `instance_prompt` can be: `a sks dog`, or with some extra description `a photo of a xjy dog`. The trained model will learn to bind a unique identifier with your specific subject in the `instance_data`.
/// - `class_prompt`    (required) - This is the prompt or description of the coarse class of your training images, in the format of `a [class noun]` (or with some extra description).  `class_prompt` is used to alleviate overfitting to your customized images (the trained model should still keep the learnt prior so that it can still generate different dogs when the `[identifier]` is not in the prompt). Corresponding to the examples of the `instant_prompt` above, the `class_prompt` can be `a dog` or `a photo of a dog`.
/// - `class_data`      (optional) - This corresponds to `class_prompt` above, also with the purpose to keep the generalizability of the model. By default, the pretrained stable-diffusion model will generate N (determined by the `num_class_images` you set) images based on the `class_prompt` provided above. But to save time or to to have your preferred specific set of `class_data`, you can also provide them in a ZIP file.
///
/// You may also want to change `num_class_images` and the `max_train_steps` settings, to trade-off speed and quality.
///
/// `seed` is randomly initialized to 1337, feel free to change it!
///
model DreamBoothTraining {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  /// The prompt you use to describe your training images, in the format: `a [identifier] [class noun]`, where the `[identifier]` should be a rare token. Relatively short sequences with 1-3 letters work the best (e.g. `sks`, `xjy`). `[class noun]` is a coarse class descriptor of the subject (e.g. cat, dog, watch, etc.). For example, your `instance_prompt` can be `a sks dog`, or with some extra description `a photo of a sks dog`. The trained model will learn to bind a unique identifier with your specific subject in the `instance_data`.
  instance_prompt String

  /// The prompt or description of the coarse class of your training images, in the format of `a [class noun]`, optionally with some extra description. `class_prompt` is used to alleviate overfitting to your customized images (the trained model should still keep the learnt prior so that it can still generate different dogs when the `[identifier]` is not in the prompt). Corresponding to the examples of the `instant_prompt` above, the `class_prompt` can be `a dog` or `a photo of a dog`.
  class_prompt String

  /// A ZIP file containing your training images (JPG, PNG, etc. size not restricted). These images contain your 'subject' that you want the trained model to embed in the output domain for later generating customized scenes beyond the training images. For best results, use images without noise or unrelated objects in the background.
  instance_data String // Path

  /// An optional ZIP file containing the training data of class images. This corresponds to `class_prompt` above, also with the purpose of keeping the model generalizable. By default, the pretrained stable-diffusion model will generate N images (determined by the `num_class_images` you set) based on the `class_prompt` provided. But to save time or to have your preferred specific set of `class_data`, you can also provide them in a ZIP file.
  class_data String // Path

  /// Minimal class images for prior preservation loss. If not enough images are provided in class_data, additional images will be sampled with class_prompt.
  num_class_images Int @default(50)

  /// The prompt used to generate sample outputs to save.
  save_sample_prompt String?

  /// The negative prompt used to generate sample outputs to save.
  save_sample_negative_prompt String?

  /// The number of samples to save.
  n_save_sample Int @default(4)

  /// CFG for save sample.
  save_guidance_scale Float @default(7.5)

  /// The number of inference steps for save sample.
  save_infer_steps Int @default(50)

  /// Flag to pad tokens to length 77.
  pad_tokens Boolean @default(false)

  /// Flag to add prior preservation loss.
  with_prior_preservation Boolean @default(true)

  /// Weight of prior preservation loss.
  prior_loss_weight Float @default(1.0)

  /// A seed for reproducible training
  seed Int @default(1337)

  /// The resolution for input images. All the images in the train/validation dataset will be resized to this resolution.
  resolution Int @default(512)

  /// Whether to center crop images before resizing to resolution
  center_crop Boolean @default(false)

  /// Whether to train the text encoder
  train_text_encoder Boolean @default(true)

  /// Batch size (per device) for the training dataloader.
  train_batch_size Int @default(1)

  /// Batch size (per device) for sampling images.
  sample_batch_size Int @default(4)

  /// Number of training epochs
  num_train_epochs Int @default(1)

  /// Total number of training steps to perform.  If provided, overrides num_train_epochs.
  max_train_steps Int @default(2000)

  /// Number of updates steps to accumulate before performing a backward/update pass.
  gradient_accumulation_steps Int @default(1)

  /// Whether or not to use gradient checkpointing to save memory at the expense of slower backward pass.
  gradient_checkpointing Boolean @default(false)

  /// Initial learning rate (after the potential warmup period) to use.
  learning_rate Float @default(0.000001)

  /// Scale the learning rate by the number of GPUs, gradient accumulation steps, and batch size.
  scale_lr Boolean @default(false)

  /// The scheduler type to use
  lr_scheduler LRScheduler @default(constant)

  /// Number of steps for the warmup in the lr scheduler.
  lr_warmup_steps Int @default(0)

  /// Whether or not to use 8-bit Adam from bitsandbytes.
  use_8bit_adam Boolean @default(false)

  /// The beta1 parameter for the Adam optimizer.
  adam_beta1 Float @default(0.9)

  /// The beta2 parameter for the Adam optimizer.
  adam_beta2 Float @default(0.999)

  /// Weight decay to use
  adam_weight_decay Float @default(0.01)

  /// Epsilon value for the Adam optimizer
  // adam_epsilon Float @default(0.00000001)
  // adam_epsilon Float @default(1e-8)
  adam_epsilon Float 

  /// Max gradient norm.
  max_grad_norm Float @default(1.0)

  // Relations
  Concept Concept[]
}

// Auto-generated by https://github.com/react-spring/gltfjsx

import { useEffect, useRef, useState, type MutableRefObject } from "react"

import { useFrame, useLoader, useThree } from "@react-three/fiber"
import {
  AnimationMixer,
  MathUtils,
  TextureLoader,
  type AnimationAction,
  type Bone,
  type Group,
  type SkinnedMesh,
} from "three"
import { type GLTF } from "three-stdlib"
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader"

import { type MousePosition } from "@/components/characters/CharacterCanvas"
import { getMouseDegrees } from "@/components/characters/utils"

function moveJoint(
  mouse: MousePosition,
  joint: Bone & { rotation: { xD?: number; yD?: number } },
  degreeLimit = 40,
) {
  const degrees = getMouseDegrees(mouse.x, mouse.y, degreeLimit)

  joint.rotation.xD = MathUtils.lerp(joint.rotation.xD ?? 0, degrees.y, 0.1)
  joint.rotation.yD = MathUtils.lerp(joint.rotation.yD ?? 0, degrees.x, 0.1)
  joint.rotation.x = MathUtils.degToRad(joint.rotation.xD)
  joint.rotation.y = MathUtils.degToRad(joint.rotation.yD)
}

type Actions = {
  idle: AnimationAction
}

type CharacterModelProps = Partial<JSX.IntrinsicElements["group"]> & {
  mouse: MutableRefObject<MousePosition>
}

type GLTFResult = GLTF & {
  nodes: {
    stacy: SkinnedMesh
    mixamorigHips: Bone
    mixamorigNeck: Bone
    mixamorigSpine: Bone
  }
  materials: {}
}

export default function Model({ mouse, ...props }: CharacterModelProps) {
  const group = useRef<Group>(null)
  const { nodes, animations } = useLoader(
    GLTFLoader,
    "/@meshes/character.glb",
  ) as GLTFResult
  const texture = useLoader(TextureLoader, "/@meshes/character.jpg")
  const actions = useRef<Actions>()

  const [mixer] = useState(() => new AnimationMixer(group.current!))
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = { idle: mixer.clipAction(animations[8], group.current!) }
    actions.current.idle.play()
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [animations, mixer])

  const { size } = useThree()
  useFrame((state, delta) => {
    const mouse = {
      x: size.width / 2 + (state.mouse.x * size.width) / 2,
      y: size.height / 2 + (-state.mouse.y * size.height) / 2,
    }
    mixer.update(delta)
    moveJoint(mouse, nodes.mixamorigNeck)
    moveJoint(mouse, nodes.mixamorigSpine)
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          receiveShadow
          castShadow
          geometry={nodes.stacy.geometry}
          skeleton={nodes.stacy.skeleton}
        >
          <meshStandardMaterial
            map={texture}
            map-flipY={false}
            // skinning
          />
        </skinnedMesh>
      </group>
    </group>
  )
}

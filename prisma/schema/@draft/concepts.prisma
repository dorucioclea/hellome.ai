// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
// TODO REMOVE
// -----------------------------------------------------------------------------

model User {
  id String @id @default(cuid())

  // TODO: *Add here *
  person ConceptPerson?
  places ConceptPlace[]
  things ConceptThing[]
}

model Family {
  id String @id @default(cuid())

  // TODO: *Add here *
  ConceptPlace ConceptPlace[]
  ConceptThing ConceptThing[]
}

model DreamBoothPrediction {
  id String @id @default(cuid())

  // TODO: *Add here *
  ConceptTensor ConceptTensor[]
}

// -----------------------------------------------------------------------------
// Concepts
// -----------------------------------------------------------------------------

model ConceptPerson {
  id     String @id @default(cuid())
  userId String @unique @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])
  // concepts ConceptTensor[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model ConceptPlace {
  id       String @id @default(cuid())
  userId   String @map(name: "user_id")
  familyId String @map(name: "family_id")
  user     User   @relation(fields: [userId], references: [id])
  family   Family @relation(fields: [familyId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model ConceptThing {
  id       String @id @default(cuid())
  userId   String @map(name: "user_id")
  familyId String @map(name: "family_id")
  user     User   @relation(fields: [userId], references: [id])
  family   Family @relation(fields: [familyId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

/// - `instance_data` (required) - A ZIP file containing your training images (JPG, PNG, etc. size not restricted). These images contain your "subject" that you want the trained model to embed in the output domain for later generating customized scenes beyond the training images. For best results, use images without noise or unrelated object in the background.
/// - `instance_prompt` (required) - This is the prompt you use to describe your training images, in the format: `a [identifier] [class noun]`, where the `[identifier]` should be a rare-token - it is found that relatively short sequences with 1-3 letters work the best (e.g. `sks`, `xjy`). `[class noun]` is a coarse class descriptor of the subject (e.g. cat, dog, watch, etc.). For example, your `instance_prompt` can be: `a sks dog`, or with some extra description `a photo of a xjy dog`. The trained model will learn to bind a unique identifier with your specific subject in the `instance_data`.
/// - `class_prompt` (required) - This is the prompt or description of the coarse class of your training images, in the format of `a [class noun]` (or with some extra description).  `class_prompt` is used to alleviate overfitting to your customized images (the trained model should still keep the learnt prior so that it can still generate different dogs when the `[identifier]` is not in the prompt). Corresponding to the examples of the `instant_prompt` above, the `class_prompt` can be `a dog` or `a photo of a dog`. 
/// - `class_data` (optional). This corresponds to `class_prompt` above, also with the purpose to keep the generalizability of the model. By default, the pretrained stable-diffusion model will generate N (determined by the `num_class_images` you set) images based on the `class_prompt` provided above. But to save time or to to have your preferred specific set of `class_data`, you can also provide them in a ZIP file.
///
/// You may also want to change `num_class_images` and the `max_train_steps` settings, to trade-off speed and quality.
/// `seed` is randomly initialized to 1337, feel free to change it!
model ConceptTensor {
  id             String @id @default(cuid())
  identifier     String
  classNoun      String @map(name: "class_noun")
  classPrompt    String @map(name: "class_prompt")
  instancePrompt String @map(name: "instance_prompt")
  tensorUrl      String @map(name: "tensor_url")

  dreamBoothPredictionId String
  prediction             DreamBoothPrediction @relation(fields: [dreamBoothPredictionId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
}

// -----------------------------------------------------------------------------
// Concepts
// -----------------------------------------------------------------------------

// model Label {
//   id        String   @id @default(cuid())
//   conceptId String
//   name      String
//   // locale    Locale
//   Concept   Concept  @relation(fields: [conceptId], references: [id])
//   createdAt DateTime @default(now()) @map("created_at")

//   @@map("labels")
// }

// model Concept {
//   id        String   @id @default(cuid())
//   labels    Label[]
//   // photos    Photo[]
//   // User      User?    @relation(fields: [userId], references: [id])
//   userId    String?
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("concepts")
// }

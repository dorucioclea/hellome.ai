import "../../schema"

// -----------------------------------------------------------------------------
// Storage
// -----------------------------------------------------------------------------

enum FileResourceType {
  ckpt
  image
  model
  pdf
  safetensor
  video
}

enum FilePrivacy {
  public  @map("public-read")
  private
}

enum CloudFileRegion {
  USEast1 @map("us-east-1")
}

model CloudFile extends Base {

  /// File name
  filename     String
  /// Filename without extension
  stem         String
  /// File extension
  extension    String @length(1,7)
  /// Filesize in bytes
  size         Int @gt(0)
  /// File MIME type
  mime         String
  /// Generic version of MIME
  resourceType FileResourceType @map("resource_type")
  /// Consolidated embedded metadata associated with the file. It includes exif, iptc, and xmp data.
  /// @zod.custom.use(z.record(z.union([z.string(), z.number()])))
  metadata     Json?

  // Cloud
  key       String /// S3 Key
  bucket    String /// S3 Bucket
  region    CloudFileRegion // S3 Region
  publicUrl String?         @unique() /// @zod.string.url()
  privacy   FilePrivacy     @default(private) /// Privacy on blob store

  photo Photo? // @ ignore
  pdf   PDF? // @ ignore

  // TODO: Add permissions

  @@unique([region, bucket, key])
  @@map("cloud_files")
}

// -----------------------------------------------------------------------------
// User File Types
// -----------------------------------------------------------------------------

model Photo extends Base {
  height    Int      @db.SmallInt @gt(0)
  width     Int      @db.SmallInt @gt(0)
  tags      String[] @default([])

  // Web
  // etag String @unique /// Generate via: md5($file.content)-$id
  // url  String @unique /// @zod.string.url()

  fileId       String        @unique @map("file_id") /// @zod.string.cuid()
  file         CloudFile     @relation(fields: [fileId], references: [id]) // TODO: onDelete: Cascade
  pageArtworks PageArtwork[] // @ ignore
  concepts     Concept[] // @ ignore

  @@map("photos")
}

model PDF extends Base {
  height    Int      @db.SmallInt @gt(0)
  width     Int      @db.SmallInt @gt(0)
  pages     Int      @db.SmallInt @gt(0)
  tags      String[]

  // Web
  // etag String @unique /// Generate via: md5($file.content)-$id
  // url  String @unique /// @zod.string.url()

  fileId  String    @unique @map("file_id") /// @zod.string.cuid()
  file    CloudFile @relation(fields: [fileId], references: [id]) // TODO: onDelete: Cascade
  edition Edition? // @ ignore

  @@map("pdfs")
}

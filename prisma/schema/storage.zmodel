import "../../schema"


abstract model ACL extends Base {
  acl String[]
}

// -----------------------------------------------------------------------------
// FileDescriptor
// -----------------------------------------------------------------------------

enum FileResourceType {
  ckpt
  image
  model
  pdf
  safetensor
  video
}

// abstract model FileDescriptor extends Base {
//   /// File name
//   filename     String
//   /// Filename without extension
//   stem         String
//   /// File extension
//   extension    String @length(1,7)
//   /// Filesize in bytes
//   size         Int @gt(0)
//   /// File MIME type
//   mime         String
//   /// Generic version of MIME
//   resourceType FileResourceType @map("resource_type")

//   /// Consolidated embedded metadata associated with the file. It includes exif, iptc, and xmp data.
//   /// @zod.custom.use(z.record(z.union([z.string(), z.number()])))
//   metadata     Json @default("{}")
// }


// -----------------------------------------------------------------------------
// CloudDescriptor
// -----------------------------------------------------------------------------

enum FilePrivacy {
  public  @map("public-read")
  private
}

enum CloudFileRegion {
  USEast1 @map("us-east-1")
}

// abstract model CloudDescriptor extends Base {
//   key       String /// S3 Key
//   bucket    String /// S3 Bucket
//   region    CloudFileRegion // S3 Region
//   publicUrl String?         @unique() @url()
  
//   /// Privacy on blob store
//   privacy   FilePrivacy     @default(private) 

//   @@unique([region, bucket, key])
// }





// abstract model Thing {
//   acl String[]
// }






// -----------------------------------------------------------------------------
// Storage
// -----------------------------------------------------------------------------



model CloudFile extends Base {

// -----------------------------------------------------------------------------
// FileDescriptor
// -----------------------------------------------------------------------------

  /// File name
  filename     String
  /// Filename without extension
  stem         String
  /// File extension
  extension    String @length(1,7)
  /// Filesize in bytes
  size         Int @gt(0)
  /// File MIME type
  mime         String
  /// Generic version of MIME
  resourceType FileResourceType @map("resource_type")

  /// Consolidated embedded metadata associated with the file. It includes exif, iptc, and xmp data.
  /// @zod.custom.use(z.record(z.union([z.string(), z.number()])))
  metadata     Json @default("{}")

// -----------------------------------------------------------------------------
// CloudDescriptor
// -----------------------------------------------------------------------------

  key       String /// S3 Key
  bucket    String /// S3 Bucket
  region    CloudFileRegion // S3 Region
  publicUrl String?         @unique() @url()
  
  /// Privacy on blob store
  privacy   FilePrivacy     @default(private) 

  @@unique([region, bucket, key])

// -----------------------------------------------------------------------------
// Assocs
// -----------------------------------------------------------------------------

  photo Photo? // @ ignore
  pdf   PDF? // @ ignore

  // TODO: Add permissions

  @@map("cloud_files")
}

// -----------------------------------------------------------------------------
// User File Types
// -----------------------------------------------------------------------------

model Photo extends Base {
  height    Int      @db.SmallInt @gt(0)
  width     Int      @db.SmallInt @gt(0)
  tags      String[] @default([])

  // Web
  // etag String @unique /// Generate via: md5($file.content)-$id
  // url  String @unique @url

  fileId       String        @unique @map("file_id")
  file         CloudFile     @relation(fields: [fileId], references: [id]) // TODO: onDelete: Cascade
  pageArtworks PageArtwork[] // @ ignore
  concepts     Concept[] // @ ignore

  @@map("photos")
}

model PDF extends Base {
  height    Int      @db.SmallInt @gt(0)
  width     Int      @db.SmallInt @gt(0)
  pages     Int      @db.SmallInt @gt(0)
  tags      String[]

  // Web
  // etag String @unique /// Generate via: md5($file.content)-$id
  // url  String @unique @url

  fileId  String    @unique @map("file_id")
  file    CloudFile @relation(fields: [fileId], references: [id]) // TODO: onDelete: Cascade
  edition Edition? // @ ignore

  @@map("pdfs")
}

import "../../schema"

// -----------------------------------------------------------------------------
// Concepts
// -----------------------------------------------------------------------------

enum ConceptType {
  person
  place
  thing
}

enum ConceptStatus {
  CREATED
  TRAINING
  TRAINED
}

model Concept extends Base {
  name            String @length(1, 100)
  type            ConceptType
  status          ConceptStatus @default(CREATED)
  description     String?
  prompt          String
  identifier      String
  classNoun       String        @map("class_noun")
  negativePrompt  String        @map("negative_prompt")
  /// The prompt you use to describe your training images, in the format: `a [identifier] [class noun]`, where the `[identifier]` should be a rare token. Relatively short sequences with 1-3 letters work the best (e.g. `sks`, `xjy`). `[class noun]` is a coarse class descriptor of the subject (e.g. cat, dog, watch, etc.). For example, your `instance_prompt` can be `a sks dog`, or with some extra description `a photo of a sks dog`. The trained model will learn to bind a unique identifier with your specific subject in the `instance_data`.
  instancePrompt  String        @map("instance_prompt")
  /// The prompt or description of the coarse class of your training images, in the format of `a [class noun]`, optionally with some extra description. `class_prompt` is used to alleviate overfitting to your customized images (the trained model should still keep the learnt prior so that it can still generate different dogs when the `[identifier]` is not in the prompt). Corresponding to the examples of the `instant_prompt` above, the `class_prompt` can be `a dog` or `a photo of a dog`.
  classPrompt     String        @map("class_prompt")
  positivePrompts String[]      @map("positive_prompts")
  negativePrompts String[]      @map("negative_prompts")

  // userId String? @unique @map("user_id")
  // user   User?   @relation(fields: [userId], references: [id])

  dreamboothTrainingId String?             @map("dreambooth_training_id")
  dreamboothTraining   DreamBoothTraining? @relation(fields: [dreamboothTrainingId], references: [id])

  dreamboothModelURI String? @map("dreambooth_model_uri") @url()

  photos Photo[]

  // @@index([userId], name: "Concept_userId")
  @@map("concepts")
}

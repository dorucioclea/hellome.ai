/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 public/@meshes/character.glb --types --shadows --transform --resolution 1024 --root public/@meshes --output src/@gen/meshes/CharacterMesh.tsx
*/

import { useRef } from "react"

import { useGLTF } from "@react-three/drei"
import { motion } from "framer-motion"
import { castArray } from "lodash"
import type * as THREE from "three"
import { type GLTF } from "three-stdlib"
import { useSnapshot } from "valtio"

import { state } from "@/components/books/BookCustomizer/store"

export type GLTFResult = GLTF & {
  nodes: {
    stacy: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {}
}

type ActionName =
  | "pockets"
  | "rope"
  | "swingdance"
  | "jump"
  | "react"
  | "shrug"
  | "wave"
  | "golf"
  | "idle"
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function CharacterMesh(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF(
    "/@meshes/character-transformed.glb",
  ) as GLTFResult
  // const { actions } = useAnimations<GLTFActions>(animations, group)

  const snap = useSnapshot(state)

  // const opacity = ["intro", "book"].includes(snap.page) ? 1 : 0

  // castArray(nodes.stacy.material).forEach(material => material.opacity = opacity)

  if (!["character"].includes(snap.page)) {
    return null
  }

  return (
    //   <motion.div
    //   className=""
    //   initial={{ opacity: 0 }}
    //   animate={{ opacity: snap.page === "character" ? 1 : 0 }}
    //   transition={{
    //     type: "spring",
    //     damping: 7,
    //     stiffness: 30,
    //     restDelta: 0.001,
    //     duration: 0.6,
    //     delay: 0.2,
    //     delayChildren: 0.2,
    //   }}
    // >
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          name="Stacy"
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.005}
          position={[0.2, -0.4, -0.1]}
        >
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="stacy"
            geometry={nodes.stacy.geometry}
            material={nodes.stacy.material}
            skeleton={nodes.stacy.skeleton}
            rotation={[-Math.PI / 2, 0, 0]}
            // position={[0, 0, 0]}
            scale={5}
          />
        </group>
      </group>
    </group>
    // </motion.div>
  )
}

useGLTF.preload("/@meshes/character-transformed.glb")
